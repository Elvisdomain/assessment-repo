name: App CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:

  # ---------------------------
  # SONARCLOUD ANALYSIS
  # ---------------------------
  sonarcloud:
    name: "SonarCloud Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=""
            -Dsonar.projectKey=""
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.junit.reportPaths=target/surefire-reports
            -Dsonar.jacoco.reportPaths=target/jacoco.exec
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.exclusions=**/target/**

      - name: Check Quality Gate Status
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        timeout-minutes: 5

      - name: Quality Gate Status Badge
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}';
            if(status === 'PASSED') {
              core.notice('✅ Quality Gate has passed!');
            } else {
              core.setFailed('❌ Quality Gate has failed!');
            }

  # ---------------------------
  # Snyk vulnerablity scan
  # ---------------------------

  snyk:
    name: "Snyk Security Scan"
    needs: sonarcloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build dependencies (for scanning)
        run: mvn install -DskipTests

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Monitor project in Snyk (optional)
        if: success()
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor


  # =========================
  # Microservices Build/Push
  # =========================
  build-and-push:
    name: Build & Push Service
    needs: sonarcloud
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [account, audit, payment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Image Tag
        id: image-tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Export IMAGE_URI
        id: image_uri
        run: echo "uri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service }}_service:${{ steps.image-tag.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
      
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ steps.image-tag.outputs.tag }}
          SERVICE_NAME=${{ matrix.service }}
          docker build -f services/$SERVICE_NAME/Dockerfile -t $SERVICE_NAME:$IMAGE_TAG ./services/$SERVICE_NAME
          docker tag $SERVICE_NAME:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${SERVICE_NAME}_service:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${SERVICE_NAME}_service:$IMAGE_TAG

  # =========================
  # Dependency Management
  # =========================
  account-depends:
    needs: build-and-push
    if: contains(fromJSON('["account"]'), matrix.service)
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ Account service built & pushed"

  audit-depends:
    needs: build-and-push
    if: contains(fromJSON('["audit"]'), matrix.service)
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ Audit service built & pushed"

  payment-depends:
    needs: [account-depends, audit-depends]
    runs-on: ubuntu-latest
    steps:
      - run: echo "✅ Payment depends on Account and Audit services, now safe to deploy"
